geom_bar(aes(y='share of p-values less than alpha'), stat = "identity", fill='skyblue')
View(share_less_than_alpha)
ggplot(share_less_than_alpha) +
geom_bar(aes(x='share of p-values less than alpha'), stat = "identity", fill='skyblue')
share_less_than_alpha$N <- c('36', '144', '576', '3600', '8100')
ggplot(share_less_than_alpha) +
geom_bar(aes(x='share of p-values less than alpha'), stat = "identity", fill='skyblue')
ggplot(share_less_than_alpha) +
geom_bar(aes(y=N, x='share of p-values less than alpha'), stat = "identity", fill='skyblue')
ggplot(share_less_than_alpha) +
geom_bar(aes(x=N, y='share of p-values less than alpha'), stat = "identity", fill='skyblue')
geom_bar(aes(x=N, y=`share of p-values less than alpha'), stat = "identity", fill='skyblue')
ggplot(share_less_than_alpha) +
geom_bar(aes(x=N, y=`share of p-values less than alpha`), stat = "identity", fill='skyblue')
share_less_than_alpha <- data.frame(rbind(
(length(n_36[n_36 < 0.05]) / length(n_36)),
(length(n_144[n_144 < 0.05]) / length(n_36)),
(length(n_576[n_576 < 0.05]) / length(n_36)),
(length(n_3600[n_3600 < 0.05]) / length(n_36)),
(length(n_8100[n_8100 < 0.05]) / length(n_36))))
names(share_less_than_alpha) <- 'share_of_pvalues_less_than_alpha'
share_less_than_alpha$N <- c('36', '144', '576', '3600', '8100')
ggplot(share_less_than_alpha) +
geom_bar(aes(x=N, y=share_of_pvalues_less_than_alpha), stat = "identity", fill='skyblue')
ggplot(share_less_than_alpha) +
geom_bar(aes(x=N, y=share_of_pvalues_less_than_alpha), stat = "identity", fill='skyblue') +
ggtitle('Share of pvalues less than alpha, for different sample sizes')
n_36 <- sapply(1:10000, function(x) z.test(10*runif(36)-5, 0))
n_144 <- sapply(1:10000, function(x) z.test(10*runif(144)-5, 0))
n_576 <- sapply(1:10000, function(x) z.test(10*runif(576)-5, 0))
n_3600 <- sapply(1:10000, function(x) z.test(10*runif(3600)-5, 0))
n_8100 <- sapply(1:10000, function(x) z.test(10*runif(8100)-5, 0))
share_less_than_alpha <- data.frame(rbind(
(length(n_36[n_36 < 0.05]) / length(n_36)),
(length(n_144[n_144 < 0.05]) / length(n_36)),
(length(n_576[n_576 < 0.05]) / length(n_36)),
(length(n_3600[n_3600 < 0.05]) / length(n_36)),
(length(n_8100[n_8100 < 0.05]) / length(n_36))))
names(share_less_than_alpha) <- 'share_of_pvalues_less_than_alpha'
share_less_than_alpha$N <- c('36', '144', '576', '3600', '8100')
ggplot(share_less_than_alpha) +
geom_bar(aes(x=N, y=share_of_pvalues_less_than_alpha), stat = "identity", fill='skyblue') +
ggtitle('Share of pvalues less than alpha, for different sample sizes')
share_less_than_alpha <- data.frame(rbind(
(length(n_36[n_36 < 0.05]) / length(n_36)),
(length(n_144[n_144 < 0.05]) / length(n_36)),
(length(n_576[n_576 < 0.05]) / length(n_36)),
(length(n_3600[n_3600 < 0.05]) / length(n_36)),
(length(n_8100[n_8100 < 0.05]) / length(n_36))))
names(share_less_than_alpha) <- 'share_of_pvalues_less_than_alpha'
share_less_than_alpha$N <- c(36, 144, 576, 3600, 8100)
ggplot(share_less_than_alpha) +
geom_bar(aes(x=N, y=share_of_pvalues_less_than_alpha), stat = "identity", fill='skyblue') +
ggtitle('Share of pvalues less than alpha, for different sample sizes')
ggplot(share_less_than_alpha) +
geom_point(aes(x=N, y=share_of_pvalues_less_than_alpha), stat = "identity", fill='skyblue') +
ggtitle('Share of pvalues less than alpha, for different sample sizes')
ggplot(share_less_than_alpha) +
geom_point(aes(x=N, y=share_of_pvalues_less_than_alpha)) +
ggtitle('Share of pvalues less than alpha, for different sample sizes')
n_36 <- sapply(1:10000, function(x) z.test(rf(36, df1=10, df2=10), 1.25))
n_144 <- sapply(1:10000, function(x) z.test(rf(144, df1=10, df2=10), 1.25))
n_576 <- sapply(1:10000, function(x) z.test(rf(576, df1=10, df2=10), 1.25))
n_3600 <- sapply(1:10000, function(x) z.test(rf(3600, df1=10, df2=10), 1.25))
n_8100 <- sapply(1:10000, function(x) z.test(rf(8100, df1=10, df2=10), 1.25))
share_less_than_alpha <- data.frame(rbind(
(length(n_36[n_36 < 0.05]) / length(n_36)),
(length(n_144[n_144 < 0.05]) / length(n_36)),
(length(n_576[n_576 < 0.05]) / length(n_36)),
(length(n_3600[n_3600 < 0.05]) / length(n_36)),
(length(n_8100[n_8100 < 0.05]) / length(n_36))))
names(share_less_than_alpha) <- 'share_of_pvalues_less_than_alpha'
share_less_than_alpha$N <- c(36, 144, 576, 3600, 8100)
ggplot(share_less_than_alpha) +
geom_point(aes(x=N, y=share_of_pvalues_less_than_alpha)) +
ggtitle('Share of pvalues less than alpha, for different sample sizes')
z.test(x=(100*runif(36))^.5, mu=6.666666666666666667, print_results = T)
par(mfrow=c(2,3))
hist((100*runif(36))^.5)
hist((100*runif(144))^.5)
hist((100*runif(576))^.5)
hist((100*runif(3600))^.5)
hist((100*runif(8100))^.5)
plot(n_vec, sim_means, ylim=c(min(sim_means),max(sim_means)))
sim_means <- c(mean((100*runif(36))^.5),
mean((100*runif(144))^.5),
mean((100*runif(576))^.5),
mean((100*runif(3600))^.5),
mean((100*runif(8100))^.5))
n_vec = c(36, 144, 576, 3600, 8100)
plot(n_vec, sim_means, ylim=c(min(sim_means),max(sim_means)))
boot_results <- rep(NA, 10000)
men_size = length(mydata$incearn[mydata$sex==1])
mydata <- read.csv("C:/Users/edwar.WJM-SONYLAPTOP/Downloads/kankakee.csv")
t.test(y = mydata$incearn[mydata$sex==2], x = mydata$incearn[mydata$sex==1],alternative = 'greater',mu = 10000)
boot_results <- rep(NA, 10000)
men_size = length(mydata$incearn[mydata$sex==1])
women_size = length(mydata$incearn[mydata$sex==2])
women = mydata$incearn[mydata$sex==2]
men_sims <- sapply(1:10000, function(x) sample(x = men, size = men_size, replace=T))
men = mydata$incearn[mydata$sex==1]
women = mydata$incearn[mydata$sex==2]
men_sims <- sapply(1:10000, function(x) sample(x = men, size = men_size, replace=T))
men_sims <- sapply(1:10000, function(x) mean(sample(x = men, size = men_size, replace=T)))
women_sims <- sapply(1:100000, function(x) mean(sample(x = women, size = women_size, replace=T)))
boot_results <- men_sims - women_sims
mystat = t.test(y = mydata$incearn[mydata$sex==2], x = mydata$incearn[mydata$sex==1],alternative = 'greater',mu = 10000)$statistic
mean(boot_results)
hist(boot_results)
men_size = length(mydata$incearn[mydata$sex==1])
women_size = length(mydata$incearn[mydata$sex==2])
men = mydata$incearn[mydata$sex==1]
women = mydata$incearn[mydata$sex==2]
# for (i in 1:10000) {
#   temp_men_sample <- sample(x = men, size = men_size, replace=T)
#   temp_women_sample <- sample(x = women, size = women_size, replace=T)
#   boot_results[i] <- mean(temp_men_sample) - mean(temp_women_sample)
# }
men_sims <- sapply(1:10000, function(x) mean(sample(x = men, size = men_size, replace=T)))
women_sims <- sapply(1:100000, function(x) mean(sample(x = women, size = women_size, replace=T)))
boot_results <- men_sims - women_sims
mystat = t.test(y = mydata$incearn[mydata$sex==2], x = mydata$incearn[mydata$sex==1],alternative = 'greater',mu = 10000)$statistic
mean(boot_results)
hist(boot_results)
abline(v=mean(boot_results), col='skyblue', lwd=6)
abline(v=quantile(x = boot_results, probs = 0.05), col='blue', lwd=6)
abline(v=10000, col='red', lwd=6)
fisher.test(mydata$work, mydata$treat)
mydata <- read.csv("C:/Users/edwar.WJM-SONYLAPTOP/Downloads/nsw_312.csv")
fisher.test(mydata$work, mydata$treat)
table(mydata$work, mydata$treat)
prop.table(table(mydata$work, mydata$treat))
prop.table(table(mydata$work, mydata$treat),margin = 1)
prop.table(table(mydata$work, mydata$treat),margin = 2)
treat_size = length(mydata$work[mydata$treat==1])
untreat_size = length(mydata$work[mydata$treat==0])
treat = mydata$work[mydata$treat==1]
untreat = mydata$work[mydata$treat==0]
treat_sims <- sapply(1:10000, function(x) mean(sample(x = treat, size = treat_size, replace=T)))
untreat_sims <- sapply(1:100000, function(x) mean(sample(x = untreat, size = untreat_size, replace=T)))
boot_results <- treat_sims - untreat_sims
mean(boot_results)
hist(boot_results)
abline(v=mean(boot_results), col='skyblue', lwd=6)
abline(v=quantile(x = boot_results, probs = 0.05), col='blue', lwd=6)
abline(v=0, col='red', lwd=6)
mean(mydata$work[mydata$treat==1]) - mean(mydata$work[mydata$treat==0])
mydata <- read.csv("C:/Users/edwar.WJM-SONYLAPTOP/Downloads/kankakee.csv")
men_size = length(mydata$incearn[mydata$sex==1])
women_size = length(mydata$incearn[mydata$sex==2])
men = mydata$incearn[mydata$sex==1]
women = mydata$incearn[mydata$sex==2]
men_sims <- sapply(1:10000, function(x) mean(sample(x = men, size = men_size, replace=T)))
women_sims <- sapply(1:100000, function(x) mean(sample(x = women, size = women_size, replace=T)))
boot_results <- men_sims - women_sims
mean(boot_results)
hist(boot_results)
abline(v=mean(boot_results), col='skyblue', lwd=6)
abline(v=quantile(x = boot_results, probs = 0.05), col='blue', lwd=6)
abline(v=10000, col='red', lwd=6)
length(boot_results[boot_results < 10000]) / length(boot_results)
mydata <- read.csv("C:/Users/edwar.WJM-SONYLAPTOP/Downloads/nsw_312.csv")
treat_n = length(mydata$earn[mydata$treat==1])
nontreat_n = length(mydata$earn[mydata$treat==0])
treat <- mydata$earn[mydata$treat==1]
nontreat <- mydata$earn[mydata$treat==0]
sim_treat_means <- sapply(1:10000, function(x) mean(sample(treat, size = treat_n, replace = T)))
sim_nontreat_means <- sapply(1:10000, function(x) mean(sample(nontreat, size = nontreat_n, replace = T)))
diffs <- sim_treat_means - sim_nontreat_means
hist(diffs)
abline(v=mean(diffs), col='skyblue', lwd=6)
abline(v=quantile(x = diffs, probs = 0.025), col='blue', lwd=6)
abline(v=quantile(x = diffs, probs = 0.975), col='blue', lwd=6)
treat_size = length(mydata$work[mydata$treat==1])
untreat_size = length(mydata$work[mydata$treat==0])
treat = mydata$work[mydata$treat==1]
untreat = mydata$work[mydata$treat==0]
treat_sims <- sapply(1:10000, function(x) mean(sample(x = treat, size = treat_size, replace=T)))
untreat_sims <- sapply(1:100000, function(x) mean(sample(x = untreat, size = untreat_size, replace=T)))
boot_results <- treat_sims - untreat_sims
mean(boot_results)
hist(boot_results)
abline(v=mean(boot_results), col='skyblue', lwd=6)
abline(v=quantile(x = boot_results, probs = 0.05), col='blue', lwd=6)
abline(v=0, col='red', lwd=6)
length(boot_results[boot_results < 0]) / length(boot_results)
mydata <- read.csv("C:/Users/edwar.WJM-SONYLAPTOP/Downloads/nsw_312.csv")
treat_n = length(mydata$earn[mydata$treat==1])
nontreat_n = length(mydata$earn[mydata$treat==0])
treat <- mydata$earn[mydata$treat==1]
nontreat <- mydata$earn[mydata$treat==0]
sim_treat_means <- sapply(1:10000, function(x) mean(sample(treat, size = treat_n, replace = T)))
sim_nontreat_means <- sapply(1:10000, function(x) mean(sample(nontreat, size = nontreat_n, replace = T)))
diffs <- sim_treat_means - sim_nontreat_means
hist(diffs)
abline(v=mean(diffs), col='skyblue', lwd=6)
abline(v=quantile(x = diffs, probs = 0.025), col='blue', lwd=6)
abline(v=quantile(x = diffs, probs = 0.975), col='blue', lwd=6)
length(boot_results[boot_results < 10000]) / length(boot_results)
length(boot_results[boot_results < 0]) / length(boot_results)
length(diffs[diffs < 0]) / length(diffs)
length(diffs[diffs < 0]) / length(diffs)
treat_n = length(mydata$earn[mydata$treat==1])
nontreat_n = length(mydata$earn[mydata$treat==0])
treat <- mydata$earn[mydata$treat==1]
nontreat <- mydata$earn[mydata$treat==0]
sim_treat_means <- sapply(1:10000, function(x) mean(sample(treat, size = treat_n, replace = T)))
sim_nontreat_means <- sapply(1:10000, function(x) mean(sample(nontreat, size = nontreat_n, replace = T)))
diffs <- sim_treat_means - sim_nontreat_means
hist(diffs)
abline(v=mean(diffs), col='skyblue', lwd=6)
abline(v=quantile(x = diffs, probs = 0.025), col='blue', lwd=6)
abline(v=quantile(x = diffs, probs = 0.975), col='blue', lwd=6)
length(diffs[diffs < 0]) / length(diffs)
n_36 <- sapply(1:1000, function(x) z.test(x=(100*runif(36))^.5, mu=6.666666666666666667))
z.test <- function(x, mu, print_results=FALSE){
stat = (length(x)^.5)*(mean(x)-mu)/ (var(x))^.5
if (stat < 0) {pval = pnorm(stat)}
if (stat > 0) {pval = 1-pnorm(stat)}
pval = 2*pval
if (print_results) {
print('For sample size')
print(length(x))
print('zstat is')
print(round(stat, 4))
print('pvalue is')
print(round(pval, 4))
cat('\n\n')}
return(pval)
}
n_36 <- sapply(1:1000, function(x) z.test(x=(100*runif(36))^.5, mu=6.666666666666666667))
n_144 <- sapply(1:1000, function(x) z.test(x=(100*runif(144))^.5, mu=6.666666666666666667))
n_576 <- sapply(1:1000, function(x) z.test(x=(100*runif(576))^.5, mu=6.666666666666666667))
n_3600 <- sapply(1:1000, function(x) z.test(x=(100*runif(3600))^.5, mu=6.666666666666666667))
n_8100 <- sapply(1:1000, function(x) z.test(x=(100*runif(8100))^.5, mu=6.666666666666666667))
share_less_than_alpha <- data.frame(rbind(
(length(n_36[n_36 < 0.05]) / length(n_36)),
(length(n_144[n_144 < 0.05]) / length(n_36)),
(length(n_576[n_576 < 0.05]) / length(n_36)),
(length(n_3600[n_3600 < 0.05]) / length(n_36)),
(length(n_8100[n_8100 < 0.05]) / length(n_36))))
names(share_less_than_alpha) <- 'share_of_pvalues_less_than_alpha'
share_less_than_alpha$N <- c(36, 144, 576, 3600, 8100)
ggplot(share_less_than_alpha) +
geom_point(aes(x=N, y=share_of_pvalues_less_than_alpha)) +
ggtitle('Share of pvalues less than alpha, for different sample sizes')
library(ggplot2)
ggplot(share_less_than_alpha) +
geom_point(aes(x=N, y=share_of_pvalues_less_than_alpha)) +
ggtitle('Share of pvalues less than alpha, for different sample sizes')
mydata <- read.csv("C:/Users/edwar.WJM-SONYLAPTOP/Downloads/kankakee.csv")
mydata$incearn[mydata$sex==1]
mean(mydata$incearn[mydata$sex==1])
mean(mydata$incearn[mydata$sex==0])
mean(mydata$incearn[mydata$sex==2])
mean(mydata$incearn[mydata$sex==1]) - mean(mydata$incearn[mydata$sex==2])
mean(mydata$incearn[mydata$sex==1])
mean(mydata$incearn[mydata$sex==2])
shift <- mean(mydata$incearn[mydata$sex==1]) - mean(mydata$incearn[mydata$sex==2])
shift <- mean(mydata$incearn[mydata$sex==1]) - mean(mydata$incearn[mydata$sex==2]) + 10000
shift <- mean(mydata$incearn[mydata$sex==1]) - mean(mydata$incearn[mydata$sex==2]) - 10000
men_size = length(mydata$incearn[mydata$sex==1])
mydata <- read.csv("C:/Users/edwar.WJM-SONYLAPTOP/Downloads/kankakee.csv")
men_size = length(mydata$incearn[mydata$sex==1])
women_size = length(mydata$incearn[mydata$sex==2])
men = mydata$incearn[mydata$sex==1]
women = mydata$incearn[mydata$sex==2]
for (i in 1:10000) {
men_temp <- sample(x = men, size = men_size, replace=T)
women_temp <- sample(x = women, size = women_size, replace=T)
x_bar <- mean(men_temp - women_temp)
boot_results[i] <- t.test(x = men_temp, y = women_temp, alternative = 'greater', var.equal = F, mu = 10000)$statistic
}
for (i in 1:10000) {
men_temp <- sample(x = men, size = men_size, replace=T)
women_temp <- sample(x = women, size = women_size, replace=T)
x_bar <- mean(men_temp - women_temp)
boot_results[i] <- t.test(x = men_temp, y = women_temp, alternative = 'greater', var.equal = F, mu = 10000)$statistic
}
for (i in 1:10000) {
men_temp <- sample(x = men, size = men_size, replace=T)
women_temp <- sample(x = women, size = women_size, replace=T)
boot_results[i] <- t.test(x = men_temp, y = women_temp, alternative = 'greater', var.equal = F, mu = 10000)$statistic
}
boot_results <- rep(NA, 10000)
for (i in 1:10000) {
men_temp <- sample(x = men, size = men_size, replace=T)
women_temp <- sample(x = women, size = women_size, replace=T)
boot_results[i] <- t.test(x = men_temp, y = women_temp, alternative = 'greater', var.equal = F, mu = 10000)$statistic
}
hist(boot_results)
x_bar = mean(men) - mean(women)
for (i in 1:10000) {
men_temp <- sample(x = men, size = men_size, replace=T)
women_temp <- sample(x = women, size = women_size, replace=T)
boot_results[i] <- t.test(x = men_temp, y = women_temp, alternative = 'greater', var.equal = F, mu = x_bar)$statistic
}
mean(boot_results)
hist(boot_results)
t.test(y = mydata$incearn[mydata$sex==2], x = mydata$incearn[mydata$sex==1],alternative = 'greater',mu = 10000)
men_size = length(mydata$incearn[mydata$sex==1])
women_size = length(mydata$incearn[mydata$sex==2])
men = mydata$incearn[mydata$sex==1]
women = mydata$incearn[mydata$sex==2]
boot_results <- rep(NA, 10000)
x_bar = mean(men) - mean(women)
for (i in 1:10000) {
men_temp <- sample(x = men, size = men_size, replace=T)
women_temp <- sample(x = women, size = women_size, replace=T)
boot_results[i] <- t.test(x = men_temp, y = women_temp, alternative = 'greater', var.equal = F, mu = x_bar)$statistic
}
mean(boot_results)
hist(boot_results)
abline(v=1.88, col='skyblue', lwd=6)
men_size = length(mydata$incearn[mydata$sex==1])
women_size = length(mydata$incearn[mydata$sex==2])
men = mydata$incearn[mydata$sex==1]
women = mydata$incearn[mydata$sex==2]
boot_results <- rep(NA, 10000)
x_bar = mean(men) - mean(women)
for (i in 1:10000) {
men_temp <- sample(x = men, size = men_size, replace=T)
women_temp <- sample(x = women, size = women_size, replace=T)
boot_results[i] <- t.test(x = men_temp, y = women_temp, alternative = 'greater', var.equal = F, mu = x_bar)$statistic
}
mean(boot_results)
hist(boot_results)
abline(v=1.8447, col='skyblue', lwd=6)
length(boot_results[boot_results >= 1.8447]) / 10000
quantile(boot_results, probs = .025)
quantile(boot_results, probs = .95)
t.test(y = mydata$incearn[mydata$sex==2], x = mydata$incearn[mydata$sex==1],alternative = 'greater',mu = 10000)$se
t.test(y = mydata$incearn[mydata$sex==2], x = mydata$incearn[mydata$sex==1],alternative = 'greater',mu = 10000)$sd
quantile(boot_results, probs = .95)*sd(mydata$incearn) + x_bar
quantile(boot_results, probs = .95)
x_bar - quantile(boot_results, probs = .95)*sd(mydata$incearn)
quantile(boot_results, probs = .95)*sd(mydata$incearn)
sd(mydata$incearn)
(var(men)/men_size + var(women)/women_size)^.5
quantile(boot_results, probs = .95)*(var(men)/men_size + var(women)/women_size)^.5
x_bar - quantile(boot_results, probs = .95)*(var(men)/men_size + var(women)/women_size)^.5
speed <-
c(28, -44, 29, 30, 26, 27, 22, 23, 33, 16, 24, 40, 21, 31, 34, -2, 25, 19)
speed <-
c(28, -44, 29, 30, 26, 27, 22, 23, 33, 16, 24, 40, 21, 31, 34, -2, 25, 19)
hist(speed)
hist(speed[speed > 0])
qqnorm(speed)
qqline(speed)
qqnorm(speed[speed > 0])
qqline(speed[speed > 0])
mean(speed)
speed <- c(28, -44, 29, 30, 26, 27, 22, 23, 33, 16, 24, 29, 24,
40 , 21, 31, 34, -2, 25, 19)
mean(speed)
33.02 - mean(speed)
shift_amount <- 33.02 - mean(speed)
newspeed <- newspeed + shift_amount
newspeed <- speed + shift_amount
mean(newspeed)
hist(newspeed)
boot_means <- rep(NA, 5000)
num_reps <- 5000
boot_means <- rep(NA, num_reps)
length(speed)
for(ii in 1:num_reps) {
mysample <- sample(newspeed, 20, replace = T)
boot_means[ii] <- mean(mysample)
}
hist(boot_means)
num_reps <- 8000
boot_means <- rep(NA, num_reps)
for(ii in 1:num_reps) {
mysample <- sample(newspeed, 20, replace = T)
boot_means[ii] <- mean(mysample)
}
hist(boot_means)
mean(boot_means)
abline(v=mean(speed), col='red')
mean(speed)
33.02 - mean(speed)
length(boot_means[boot_means >= (33.02+shift_amount)]
length(boot_means[boot_means <= mean(speed)] +
length(boot_means[boot_means <= mean(speed)]) +
length(boot_means[boot_means >= (33.02+shift_amount)])
round(59/num_reps, 2)
length(boot_means[boot_means <= mean(speed)])
length(boot_means[boot_means >= (33.02+shift_amount)])
num_reps <- 1000
boot_means <- rep(NA, num_reps)
for(ii in 1:num_reps) {
mysample <- sample(newspeed, 20, replace = T)
boot_means[ii] <- mean(mysample)
}
hist(boot_means)
mean(boot_means)
abline(v=mean(speed), col='red')
length(boot_means[boot_means <= mean(speed)]) +
length(boot_means[boot_means >= (33.02+shift_amount)])
round(3/num_reps, 2)
round(3/num_reps, 4)
num_reps <- 8000
boot_means <- rep(NA, num_reps)
for(ii in 1:num_reps) {
mysample <- sample(newspeed, 20, replace = T)
boot_means[ii] <- mean(mysample)
}
hist(boot_means)
mean(boot_means)
abline(v=mean(speed), col='red')
length(boot_means[boot_means <= mean(speed)]) +
length(boot_means[boot_means >= (33.02+shift_amount)])
round(57/num_reps, 4)
speed <- c(28, -44, 29, 30, 26, 27, 22, 23, 33, 16, 24, 29, 24,
40 , 21, 31, 34, -2, 25, 19)
hist(speed)
hist(speed[speed > 0])
qqnorm(speed)
qqline(speed)
qqnorm(speed[speed > 0])
qqline(speed[speed > 0])
mean(speed)
speed <- speed[speed > 0]
33.02 - mean(speed)
shift_amount <- 33.02 - mean(speed)
newspeed <- speed + shift_amount
mean(newspeed)
hist(newspeed)
num_reps <- 8000
boot_means <- rep(NA, num_reps)
len_sample <- length(newspeed)
for(ii in 1:num_reps) {
mysample <- sample(newspeed, len_sample, replace = T)
boot_means[ii] <- mean(mysample)
}
hist(boot_means)
mean(boot_means)
abline(v=mean(speed), col='red')
length(boot_means[boot_means <= mean(speed)]) +
length(boot_means[boot_means >= (33.02+shift_amount)])
set.seed(94859)
X1 <- rnorm(mean = 0, sd = 1)
X1 <- rnorm(mean = 0, sd = 1, n = 250)
X2 <- rnorm(mean = 0, sd = 1, n = 250)
treated <- c(rep(1, 125), rep(0, 125))
u = X1
Ti = 1.8 * X2 + 2
Yc = 15 + u
Yt = 15 + Ti + u
plot(Yc, u)
plot(u, Tc)
plot(u, Yc)
hist(Ti)
Yobs[treated == 1] = Yt
Yobs = Yc
Yobs[treated == 1] = Yt
Yobs[treated == 1] = Yt[treated == 1]
Yobs = Yc
Yobs[treated == 1] = Yt[treated == 1]
plot(u, Yobs)
plot(u, Yobs)
library(dplyr)
##Part B
df <- cbind(Yobs, treated)
View(df)
Yobs %>% group_by(treated) %>% summarise(Yobs)
df %>% group_by(treated) %>% summarise(Yobs)
df %>% group_by(factor(treated)) %>% summarise(Yobs)
df %>% group_by(factor(treated)) %>% summarise(mean = mean(Yobs))
##Part B
df <- data.frame(Yobs, treated)
df %>% group_by(treated) %>% summarise(mean = mean(Yobs))
df %>% group_by(treated) %>% summarise(mean = mean(Yobs), median = median(Yobs))
df %>%
group_by(treated) %>%
summarise(mean = mean(Yobs), median = median(Yobs), sd = sd(Yobs))
##Part C
mean(Ti)
mean(df$Yobs[df$treated==1])
mean(df$Yobs[df$treated==0])
mean(df$Yobs[df$treated==1]) - mean(df$Yobs[df$treated==0])
df %>%
group_by(treated) %>%
summarise(mean = mean(Yobs), median = median(Yobs), sd = sd(Yobs))
mean(df$Yobs[df$treated==1]) - mean(df$Yobs[df$treated==0])
##Part D
mean(Ti[treated==1])
##Part D
mean(Ti[treated==1])
mean(df$Yobs[df$treated==1]) - mean(df$Yobs[df$treated==0])
library(sp)
library(rgdal)
library(spatialEco)
setwd("C:/Users/edwar.WJM-SONYLAPTOP/Documents/GitHub/ML_spring_2019/exercise one")
df <- read.csv('alleged_crimes_2018.csv')
df <- df[is.na(df$latitude) == F, ]
View(df)
library(sp)
library(rgdal)
library(spatialEco)
df <- read.csv('alleged_crimes_2017.csv')
df <- df[is.na(df$latitude) == F, ]
spdf <- SpatialPointsDataFrame(coords = df[, c('longitude', 'latitude')], data = df)
shape <- readOGR(".","geo_export_131406b6-afd8-46ca-98c9-f3564a20a214")
proj4string(spdf)
proj4string(shape)
proj4string(spdf) <- CRS("+init=epsg:4326")
shape <- spTransform(shape, CRS("+init=epsg:4326"))
spatial_joined <- point.in.poly(spdf, shape)
plot(spatial_joined[1:200,])
new.df <- spatial_joined@data
write.csv(new.df, "alleged_crimes_2017_with_tracts.csv")
